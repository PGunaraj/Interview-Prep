Q - inverse left and right child of each node


def invertTree(self, root):
    #RECURSIVE APPROACH - O(n) time + O(h) space
    if root==None:
        return None
    temp=root.left
    root.left=root.right
    root.right=temp
    self.invertTree(root.left)
    self.invertTree(root.right)
    return root

    #ITERATIVE APPROACH - O(n) time + O(n/2) space
    if root==None:
        return None
    Q=[]
    Q.append(root)
    while len(Q)>0:
        curr=Q.pop(0)
        temp=curr.left
        curr.left=curr.right
        curr.right=temp
        if curr.left!=None:
            Q.append(curr.left)
        if curr.right!=None:
            Q.append(curr.right)
    return root
