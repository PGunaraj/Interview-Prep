#Q - https://www.geeksforgeeks.org/count-possible-paths-two-vertices/
#Do DFS from src and check if u can reach the dest. If yes, count++
#each time, make the VIS as false so that u can get all paths
#t - O(V+E)
#s - O(V)


from collections import defaultdict
class Graph:
	def __init__(self,v):
		self.verLen = v
		self.verList = defaultdict(list)
	
	def addEdge(self,x,y):
		self.verList[x].append(y)
	
	def DFSUtil(self,s,d,vis,c):
		vis[s] = True
		if s==d:
			c[0] += 1
		else:
			for vertex in self.verList[s]:
				if not vis[vertex]:
					self.DFSUtil(vertex,d,vis,c)
		vis[s] = False
		
	def getNoOfPaths(self,s,d):
		vis = [False]*self.verLen
		count = []
		count.append(0)
		self.DFSUtil(s,d,vis,count)
		return count[0]

g = Graph(5)
g.addEdge(0, 1) 
g.addEdge(0, 2) 
g.addEdge(0, 3) 
g.addEdge(1, 3) 
g.addEdge(2, 0) 
g.addEdge(2, 1) 
print("Number of paths from src to dest are: " + str(g.getNoOfPaths(2,3)))
