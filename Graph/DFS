#same as DFS of tree
#only diff is the node maybe re-visited -> use VISITED array
#t - O(V+E)
#s - O(V)

from collections import defaultdict
class Graph:
	def __init__(self,v):
		self.verLen = v
		self.verList = defaultdict(list)
	
	def addEdge(self,x,y):
		self.verList[x].append(y)
	
	def DFSUtil(self,v,vis):
		vis[v] = True
		print(v, end=" ")
		for vertex in self.verList[v]:
			if not vis[vertex]:
				self.DFSUtil(vertex,vis)
		
	def DFS(self,source):
		vis = [False]*self.verLen
		self.DFSUtil(source,vis)

g = Graph(4)
g.addEdge(0,1)
g.addEdge(0,2)
g.addEdge(1,2)
g.addEdge(2,0)
g.addEdge(2,3)
g.DFS(2)
