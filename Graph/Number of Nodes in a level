#do BFS. whenever level is reached, we got the number of nodes in the queue
#t - O(V+E)
#s - O(V)

from collections import defaultdict
class Graph:
	def __init__(self,v):
		self.verLen = v
		self.verList = defaultdict(list)
	
	def addEdge(self,x,y):
		self.verList[x].append(y)
	
	def BFS(self,level):
		q = []
		vis = [False]*self.verLen
		
		q.append(0)
		vis[0] = True
		lev = 0
		
		while q:
			tmp = q.pop(0)
			for v in self.verList[tmp]:
				if not vis[v]:
					q.append(v)
					vis[v] = True
			lev += 1
			if lev == level:
				return len(q)

g = Graph(7)
g.addEdge(0, 1) 
g.addEdge(0, 2) 
g.addEdge(1, 3) 
g.addEdge(1, 4) 
g.addEdge(1, 5) 
g.addEdge(2, 6) 
print("Number of nodes in a level is: " + str(g.BFS(2)))
