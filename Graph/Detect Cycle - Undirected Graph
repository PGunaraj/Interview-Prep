#(Q) - https://www.geeksforgeeks.org/detect-cycle-undirected-graph/
#we keep VISITED array to track the vertices that are already visited
#cycle exists -> there is an adjacent vertex U from V which is already visited but V didn't come from U -> V's parent is not U
#t - O(V+E)
#s - O(V)


from collections import defaultdict
class Graph:
	def __init__(self,v):
		self.verLen = v
		self.verList = defaultdict(list)
	
	def addEdge(self,x,y):
		self.verList[x].append(y)
		self.verList[y].append(x)
	
	def isCyclic(self,v,vis,parent):
		vis[v] = True
		for ver in self.verList[v]:
			if not vis[ver]:
				if self.isCyclic(ver,vis,v):
					return True
			elif parent!=ver:
				return True
		return False
		
	def detectCycle(self):
		vis = [False]*self.verLen
		for v in range(self.verLen):
			if not vis[v]:
				if self.isCyclic(v,vis,-1):
					return True
		return False

g = Graph(4)
g.addEdge(0, 1) 
g.addEdge(0, 2) 
g.addEdge(0, 3) 
g.addEdge(1, 3) 
g.addEdge(2, 0) 
g.addEdge(2, 1) 
print("Is there a cycle in the graph?: " + str(g.detectCycle()))
