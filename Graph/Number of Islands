#(Q) -> https://www.geeksforgeeks.org/find-number-of-islands/
#use adjacency matrix to represent the graph
#start from (0,0) and go in all 8 directions. 
#If it's inside the matrix and it's a 1 then include it to the curretn island and continue going in 8 directions.



from collections import defaultdict
class Graph:
	def __init__(self,r,c,g):
		self.row = r
		self.col = c
		self.graph = g
	
	def isSafe(self,i,j,vis):
		#check if the current pos in matrix is inside the boundary
		#and the pos is not already visited and the value is 1
		if i >= 0 and i < self.row and j >= 0 and j < self.col and not vis[i][j] and self.graph[i][j] == 1:
			return True
		return False
		
	def dfs(self,i,j,vis):
		#define all 8 directions
		r = [-1, -1, -1,  0, 0,  1, 1, 1]
		c = [-1,  0,  1, -1, 1, -1, 0, 1]
		vis[i][j] = True
		#go in al 8 directions if it's safe
		for k in range(8):
			if self.isSafe(i+r[k],j+c[k],vis):
				self.dfs(i+r[k],j+c[k],vis)
		
	def numberOfIslands(self):
		vis = [[False for j in range(self.col)] for i in range(self.row)]
		count = 0
		for i in range(self.row):
			for j in range(self.col):
				if not vis[i][j] and self.graph[i][j] == 1:
					self.dfs(i,j,vis)
					count += 1
		return count

graph = [[1, 1, 0, 0, 0], [0, 1, 0, 0, 1], [1, 0, 0, 1, 1], [0, 0, 0, 0, 0], [1, 0, 1, 0, 1]] 
g = Graph(len(graph),len(graph[0]),graph)
x = g.numberOfIslands()
print("Number of connected components: " + str(x))
