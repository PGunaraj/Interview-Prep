segment tree:
  create - o(n)
  maintain - o(n) space
  lookup - o(logn)

refer: https://www.youtube.com/watch?v=ZBHKZF5w4YU

how to create:
1) split array into 2 halves
2) elements at leaf of bin tree
3) build tree by finding min of 2 leaf
4) to find te ans now use these three conditions,
    a) partial overlap - look into both directions of tree
    b) total overlap - return val at tree pos
    c) no overlap - return dump val

size of seg tree:
    len(array) = pow of 2, then no of elements in tree are: [len(array)*2] - 1
    else, no: [next pow of 2 of len(array) * 2] - 1

represent seg tree in array:
    write normally into array
    to find left child - 2i+1
    to find right child - 2i+2
    to find parent - (i-1)/2
  
Algorithm:-
constructTree(arr,seg,s,e,pos):
    if s==e:
        seg[pos]=arr[s]
        return
    m=(s+e)/2
    constructTree(arr,seg,s,m,(2*pos)+1)
    constructTree(arr,seg,m+1,e,(2*pos)+2)
    seg[pos]=sum(seg[(2*pos)+1],seg[(2*pos)+2])
    
rangeSum(seg,l,h,s,e,pos):
    if l<=s and h>=e:
        return seg[pos]
    elif l>e or h<s:
        return 0
    else:
        m=(s+e)/2
        return sum(rangeSum(seg,l,h,s,m,(2*pos)+1), rangeSum(seg,l,h,m+1,e,(2*pos)+2))
