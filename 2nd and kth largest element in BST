# do reverse inorder
# for 2nd largest, when count is 2 print it and stop traversing
# for kth largest, when count is k print it and stop traversing

class Node:
	def __init__(self,v):
		self.val=v
		self.left=None
		self.right=None

class BinTree:
	def __init__(self):
		self.root=None
		self.c=0
	def insertNode(self,r,n):
		if r==None:
			return n
		elif n.val<r.val:
			if r.left==None:
				r.left=n
			else:
				self.insertNode(r.left,n)
		else:
			if r.right==None:
				r.right=n
			else:
				self.insertNode(r.right,n)
			return
	def insert(self,val):
		node=Node(val)
		if self.root==None:
			self.root=node
		else:
			self.insertNode(self.root,node)
	def inorder(self,r):
		if r!=None:
			if r.left:
				self.inorder(r.left)
			print(r.val,end=" ")
			if r.right:
				self.inorder(r.right)
	
	#second largest
	def secLarUtil(self,r):
		if r==None or self.c>=2:
			return
		self.secLarUtil(r.right)
		self.c=self.c+1
		if self.c==2:
			print("2nd largest is",r.val)
		self.secLarUtil(r.left)
	def secLar(self):
		self.secLarUtil(self.root)
	
	#kth largest
	def kLarUtil(self,r,k):
		if r==None or self.c>=k:
			return
		self.kLarUtil(r.right,k)
		self.c=self.c+1
		if self.c==k:
			print(k,"th largest is",r.val)
		self.kLarUtil(r.left,k)
	def kLar(self,k):
		self.kLarUtil(self.root,k)

b=BinTree()
b.insert(20)
b.insert(9)
b.insert(5)
b.insert(25)
b.insert(35)
b.inorder(b.root)
print()
b.secLar()
b.kLar(3)
