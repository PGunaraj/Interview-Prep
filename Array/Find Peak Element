https://leetcode.com/problems/find-peak-element/solution/

#O(n) ITERATIVE APPROACH

Traverse the array from l to r. When an elem greater than it's next elem is found return it's indx. Else return size-1.
3 cases:
1) array in ascending order - last no is peak (num[n]>num[0] and num[n]>num[n-1])
2) array in descending order - 1st num is peak (num[0]>num[1] and num[0]>num[n])
3) random array - any elem is peak so check for elem > elem+1

def findPeakElement(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        n=len(nums)-1
        for i in range(n):
            if nums[i]>nums[i+1]: #handles case 2 and 3
                return i
        return n  #handles case 1
       
       
       
#O(log n) ITERATIVE BINARY SEARCH

def findPeakElement(self, nums):
        l=0
        r=len(nums)-1
        while l<r:
            mid=(l+r)//2
            if nums[mid]>nums[mid+1]:
                r=mid
            else:
                l=mid+1
        return l
