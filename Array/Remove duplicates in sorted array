#store unique elemets in output array
# time - O(n)
#space - O(n)

def removeDuplicatesSortedArray(arr):
	op = []
	op.append(arr[0])
	curr = 0
	for i in range(1,len(arr)):
		if arr[i] != op[curr]:
			curr += 1
			op.append(arr[i])
	return(op)
	
#arr = [1,1,1,2,2,3,3,5,5,5,5,7]
#arr = [1,3,5]
arr = [1,1,1,1,1,1]
arr = removeDuplicatesSortedArray(arr)
print(arr)



#store unique elem in hash map and remove duplicates in the array
#time - O(n)
#space - O(n)

def removeDuplicatesSortedArray(arr):
	d = {}
	curr = 0
	for i in range(len(arr)):
		if arr[i] not in d.keys():
			d[arr[i]] = 1
			arr[curr]=arr[i]
			curr += 1
	return(curr)
	
#arr = [1,1,1,2,2,3,3,5,5,5,5,7]
#arr = [1,3,5]
arr = [1,1,1,1,1,1]
pos = removeDuplicatesSortedArray(arr)
print(arr[:pos])


#use curr to store index of array and compare to each elem in array. curr+1 will be next unique elem.
#time - O(n)
#space - O(1)

def removeDuplicatesSortedArray(arr):
	curr = 0
	for i in range(1,len(arr)):
		if arr[i] != arr[curr]:
			curr += 1
			arr[curr]=arr[i]
	return(curr+1)
	
arr = [1,1,1,2,2,3,3,5,5,5,5,7]
#arr = [1,3,5]
#arr = [1,1,1,1,1,1]
pos = removeDuplicatesSortedArray(arr)
print(arr[:pos])
