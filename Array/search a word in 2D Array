https://leetcode.com/problems/word-search/description/

#O()
use a stack to store pos of 2D array  - O(n)

class Solution(object):
    def exist(self, board, word):
        if not board:
            return False
        for i in range(len(board)):
            for j in range(len(board[0])):
                if self.dfs(board, i, j, word, []):
                    return True
        return False

    # check whether can find word starting at (i,j) position    
    def dfs(self, board, i, j, word, visited):
        if len(word) == 0: # all the characters are checked
            return True
        #print(i,j)
        if i<0 or i>=len(board) or j<0 or j>=len(board[0]) or word[0]!=board[i][j] or (i, j) in visited:
            return False
        visited.append((i, j))  #append the maching letter
        #print(visited)
        #go in all directions and search for next letter
        res = self.dfs(board, i-1, j, word[1:], visited) or self.dfs(board, i+1, j, word[1:], visited) 
                or self.dfs(board, i, j-1, word[1:], visited) or self.dfs(board, i, j+1, word[1:], visited)
        if not res: #when we cannot proceed with this letter, pop it from stack
            a = visited.pop()
        return res
