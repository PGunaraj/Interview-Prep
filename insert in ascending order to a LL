class Node:
	def __init__(self,val):
		self.data=val
		self.next=None

class LL:
	def __init__(self):
		self.head=None
	def insert(self,v): #insert into a LL in ascending order
		node=Node(v)
		skip=True
		if self.head==None:
			self.head=node
		else:
			prev=self.head
			curr=self.head
			while curr!=None and skip:
				if curr.data<node.data:
					prev=curr
					curr=curr.next
				else:
					skip=False
			if skip:
				prev.next=node
			elif curr==self.head:
				node.next=curr
				self.head=node
			else:
				prev.next=node
				node.next=curr
	def chkIfLL_Contiguous(self): #check if LL is continuous or not
		curr=self.head
		while curr.next!=None:
			if curr.data+1 != curr.next.data:
				return("NO")
			curr=curr.next
		return("YES")

l=LL()
l.insert(5)
l.insert(2)
l.insert(3)
l.insert(6)
l.insert(4)
l.insert(10)
x=l.chkIfLL_Contiguous()
print(x)
