https://www.youtube.com/watch?v=LPFhl65R7ww&t=658s

#O(log(min(m,n)))
(works for both same sized and diff sized arrays)

def findMedianSortedArrays(self, nums1, nums2):
    x=nums1
    y=nums2
    m, n = len(x), len(y)
    if m>n:
        x,y,m,n=y,x,n,m
    if n==0:
        return -1

    start=0
    end=m

    while start<=end:
        partX=(start+end)//2
        partY=((m+n+1)//2)-partX

        #x is too small. so move x to right.
        if partX<m and y[partY-1]>x[partX]:
            start=partX+1

        #x s too big. so move x to left.
        elif partX>0 and x[partX-1]>y[partY]:
            end=partX-1

        #i is perfect
        else:

            #getting max left part
            if partX==0:
                maxLeft=y[partY-1]
            elif partY==0:
                maxLeft=x[partX-1]
            else:
                maxLeft=max(x[partX-1],y[partY-1])

            #checking if total size is odd and returning max left 
            if (m+n)%2!=0:
                return maxLeft

                #getting min right part
                if partX==m:
                    minRight=y[partY]
                elif partY==n:
                    minRight=x[partX]
                else:
                    minRight=min(x[partX],y[partY])

                #returning avg of max and min if total size is even
                return((maxLeft+minRight)/2.0)
