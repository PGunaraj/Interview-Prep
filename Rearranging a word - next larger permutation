#find the next larger permutation for the given string


#1.brute force - generate all permutations for this set of numbers 
		and print the number next to the given number in the permutation list
		(pytohn3)
		
from itertools import permutations
import re
 
s="ac%cd5"
new=re.sub('[^a-z]',"",s)
print(new)
perms = sorted(set(''.join(p) for p in permutations(new)))
print(perms)
ans=''
for i in range(len(perms)):
	if perms[i] == new:
		ans=perms[i+1]
		break
print("next larger permutation is: ",ans)



#2.O(n)
1) traverse from the right to find the element which is less than it's next element - swapA
2) find the next greater element of the swapA by traversing from the right - swapB
3) flip flop swapA and swapB
4) reverse the numbers after swap_point
(python)

def findSwapPos(arr,n):
	ans=0
	for i in range(n-2,-1,-1):	#find swap pos
		if arr[i+1]>arr[i]:
			break
	if i==0:
		return "no greater permutation"		
	#print "swap pos - ",i,arr[i]
	for j in range(n-1,i,-1):	#find next larger element of the swap elem
		if arr[j]>arr[i]:
			break
	#print "next greater elem pos - ",j,arr[j]
	arr[i],arr[j]=arr[j],arr[i]	#swap the both
	for k in range(i+1):		#get the numbers before swap pos including swap pos
		ans=(ans*10)+arr[k]
	#print(ans)
	temp=arr[i+1:n]			#reverse the elements after swap pos
	temp=temp[::-1]
	#print(temp)
	for k in range(len(temp)):	#get the numbers after swap pos
		ans=(ans*10)+temp[k]
	return("next larger permutation is - ",ans)

num="534976"
a=map(int,num)
x=findSwapPos(a,len(a))
print x


